#!/bin/sh

set -e

LIST_HOST='https://mail-index.netbsd.org'
LIST_INDEX="${LIST_HOST}/pkgsrc-bulk/tindex.html"
DEFAULT_MAINTAINER='schmonz@NetBSD.org'
DEFAULT_N_BUILDS=5

usage() {
	cat << EOF
Usage: $0 [OPTIONS]

Report recent pkgsrc build failures for a given package maintainer.

Options:
  -m, --maintainer EMAIL    Maintainer email address (default: ${DEFAULT_MAINTAINER})
  -n, --builds COUNT        Number of recent builds to check (default: ${DEFAULT_N_BUILDS})
  -h, --help                Show this help message

Examples:
  $0
  $0 --maintainer user@example.com
  $0 --builds 10
  $0 -m user@example.com -n 3
EOF
}

fetch_to_stdout() {
	url="$1"; shift
	fetch -q -o - "${url}"
}

fetch_list_index() {
	fetch_to_stdout "${LIST_INDEX}"
}

extract_list_messages() {
	grep ' href="/pkgsrc-bulk/[0-9]\+/[0-9]\+/[0-9]\+/msg[0-9]\+\.html">pkgsrc-' \
	| sed -e 's|.* href="||' -e 's|">pkgsrc-.*||'
}

extract_report_link() {
	slug="$1"; shift

	fetch_to_stdout "${LIST_HOST}${slug}" \
	| grep 'Full report: ' \
	| sed -e 's|.* href="||' -e 's|">http.*||'
}

extract_build_failures() {
	report_url="$1"; shift
	maintainer="$1"; shift
	base_url=$(dirname $(dirname ${report_url}))

	fetch_to_stdout "${report_url}" \
	| html2text \
	| grep "${maintainer} | failed" \
	| sed -e 's|.*(||' -e 's|).*||' -e "s|^\.\./|${base_url}/|g"
}

format_build_log() {
	log_url="$1"; shift

	echo "-----"
	echo
	echo "# <${log_url}>"
	echo
	fetch_to_stdout "${log_url}" \
	| sed -e 's|^|    |g'
	echo
	echo
}


main() {
	# Initialize variables with defaults
	maintainer="${DEFAULT_MAINTAINER}"
	n_builds="${DEFAULT_N_BUILDS}"

	# Parse command line arguments
	while [ $# -gt 0 ]; do
		case "$1" in
			-m|--maintainer)
				if [ -n "$2" ] && [ "${2#-}" = "$2" ]; then
					maintainer="$2"
					shift 2
				else
					echo "Error: --maintainer requires a non-empty option argument" >&2
					usage >&2
					exit 1
				fi
				;;
			-n|--builds)
				if [ -n "$2" ] && [ "${2#-}" = "$2" ]; then
					n_builds="$2"
					shift 2
				else
					echo "Error: --builds requires a non-empty option argument" >&2
					usage >&2
					exit 1
				fi
				;;
			-h|--help)
				usage
				exit 0
				;;
			--)
				shift
				break
				;;
			-*)
				echo "Error: Unknown option: $1" >&2
				usage >&2
				exit 1
				;;
			*)
				echo "Error: Unexpected argument: $1" >&2
				usage >&2
				exit 1
				;;
		esac
	done

	# Validate n_builds is a positive integer
	case "${n_builds}" in
		''|*[!0-9]*)
			echo "Error: Number of builds must be a positive integer, got: ${n_builds}" >&2
			usage >&2
			exit 1
			;;
		0)
			echo "Error: Number of builds must be greater than 0" >&2
			usage >&2
			exit 1
			;;
	esac

	for bulk_build in $(fetch_list_index | extract_list_messages | head -${n_builds}); do
		bulk_report=$(extract_report_link "${bulk_build}")
		for build_log in $(extract_build_failures "${bulk_report}" "${maintainer}"); do
			format_build_log "${build_log}"
		done
	done
}

main "$@"
exit $?
